<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>CSCI2040U.tourcat</groupId>
    <artifactId>tourcat</artifactId>
    <version>1.0</version>

    <properties>
        <!-- Standardize on Java 21, matching your previous error and Launch4j config -->
        <maven.compiler.source>21</maven.compiler.source>
        <maven.compiler.target>21</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <dependencies>
        <!-- OpenCSV -->
        <dependency>
            <groupId>com.opencsv</groupId>
            <artifactId>opencsv</artifactId>
            <version>5.9</version>
            <!-- Default scope is 'compile', which is correct -->
        </dependency>

        <!-- Apache Commons IO -->
        <dependency>
            <groupId>commons-io</groupId>
            <artifactId>commons-io</artifactId>
            <version>2.6</version> <!-- Consider updating to a more recent version like 2.11.0 or later -->
        </dependency>

        <!-- FlatLaf Look and Feel -->
        <dependency>
            <groupId>com.formdev</groupId>
            <artifactId>flatlaf</artifactId>
            <version>3.4.1</version> <!-- Use a specific stable version -->
            <!-- Default scope 'compile' is generally fine here too -->
        </dependency>

        <!-- == Test Dependencies == -->
        <!-- JUnit 5 -->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <version>5.10.1</version> <!-- Use recent versions -->
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
            <version>5.10.1</version> <!-- Use recent versions -->
            <scope>test</scope>
        </dependency>

        <!-- Mockito -->
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
            <version>5.10.0</version> <!-- Use recent versions -->
            <scope>test</scope>
        </dependency>
        <!-- Removed redundant JUnit 4 dependency -->

    </dependencies>

    <build>
        <plugins>
            <!-- Compiler Plugin (Configuration now relies on properties) -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.11.0</version> <!-- Use a recent version -->
                <!-- Configuration for source/target is now taken from <properties> -->
            </plugin>

            <!-- Surefire Plugin (for running tests) -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>3.2.5</version> <!-- Use a recent version -->
            </plugin>

            <!-- *** Maven Shade Plugin (Builds the Fat JAR) *** -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <version>3.5.1</version> <!-- Use a recent version -->
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>shade</goal>
                        </goals>
                        <configuration>
                            <transformers>
                                <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                                    <!-- IMPORTANT: Verify your Main Class name and package -->
                                    <!-- If it's in the default package: -->
                                    <mainClass>MainApplication</mainClass>
                                    <!-- If it's in a package like 'com.yourcompany.tourcat': -->
                                    <!-- <mainClass>com.yourcompany.tourcat.MainApplication</mainClass> -->
                                </transformer>
                            </transformers>
                            <!-- Optional: Filters to prevent issues with signed JARs within the fat JAR -->
                            <filters>
                                <filter>
                                    <artifact>*:*</artifact>
                                    <excludes>
                                        <exclude>META-INF/*.SF</exclude>
                                        <exclude>META-INF/*.DSA</exclude>
                                        <exclude>META-INF/*.RSA</exclude>
                                    </excludes>
                                </filter>
                            </filters>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- Standard JAR plugin - Not strictly needed for main class manifest when using Shade -->
            <!-- You can potentially remove this if Shade is handling the manifest correctly -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>3.3.0</version> <!-- Use a recent version -->
                <configuration>
                    <archive>
                        <manifest>
                            <!-- Let Shade plugin handle the mainClass in the final shaded JAR -->
                            <!-- <mainClass>MainApplication</mainClass> -->
                            <!-- You might add other manifest entries here if needed -->
                        </manifest>
                    </archive>
                </configuration>
            </plugin>

        </plugins>
    </build>
</project>